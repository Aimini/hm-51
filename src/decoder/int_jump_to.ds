
######################################################## 
#  support 4 interrupt , when we talk about IE and IP, we only care about low-nibble( but we alsoconsider EA(IE[7]))# 
# 1. check IE
# 2. select IRQ with IP
# 3. J to interrupt vector
# parameter:
#   @0 : jump destination when no of interrupt occurs, 
#    SR(might be PCH, decided by instruction) will not be modified in this case.
#   @1 : jump destination when interrupt occours, PC will
#   stored in WR and SR
######################################################## 

#------------- check EA
# 1. WR <- IE
# 2. jump_if(IE < 0x80)
RF(IE), BUS(IRR),  WR(WE), JLT(0x81, @0)

#------------- check IE
# jump_if(IRR == 0)
ALUO(ZF_B),    JALUF(@0)
# 1. T0 <- IE & IRR
# 2. jump_if(IRR == 0)
RF(IE),    ALU(AND),   WR(WE)   

ALUO(ZF_B),    JALUF(@0)
#------------- 
# 1. T0, WR <- GENIRRQN(IE & IRR, IP)
# 2. jump_if(IE & IRR == 0)
RF(IP), ALU(GENIRRQN), WR(WE)
RF(T0, WE), ALU(B)
# select the highest priority IRQ
# T0, WR <-SELHIRRQN(IE&IRQ)
RF(T0, WE), ALU(SELHIRRQN), WR(WE)
RF(ISR, WE), ALU(ISRSET), IRR(CLR)
RF(ISR), JGT(0x7F, @0)

### T0 <- SHIRQN(IRQ) (highest priority IRQ number)
### NOW T0[1:0]  is the IRQ number, T0[2] is the priority, T0[3] indicates wheather there is a valid IRQ.
#--------------------------


## save PC
RF(SP,WE), ALU(INC),  SR(WE)
RF(PCL),   ALU(A),   RAM(WE)
RF(SP,WE), ALU(INC),  SR(WE)
RF(PCH),   ALU(A),   RAM(WE)


## load interrupt vector address to pc
RF(T0,WE), ALU(IVADDR),  WR(WE)


RF(PCL,WE),ALU(B), WR(WE)
RF(PCH,WE), LI(0), SR(WE), J(@1)